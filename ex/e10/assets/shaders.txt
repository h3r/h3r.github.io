\shaders
sun sun.vs sun.fs
fx @SCREEN fx.fs
_env env.vs env.fs

\env.vs
precision highp float;
attribute vec3 a_vertex;
varying vec3 v_vertex;
uniform samplerCube u_env_texture;
uniform mat4 u_inv_viewprojection;
void main(){
    v_vertex = (a_vertex * vec3(2.0)) - vec3(1.0);
    v_vertex.z = 1.0;
    gl_Position = vec4(v_vertex,1.0);
    v_vertex = (u_inv_viewprojection * vec4(v_vertex,1.0) ).xyz ;
}

\env.fs
precision highp float;
varying vec3 v_vertex;
uniform samplerCube u_env_texture;
void main(){
  gl_FragColor = textureCube(u_env_texture, vec3(v_vertex.xy,v_vertex.z));
}

\sun.vs

precision highp float;
attribute vec3 a_vertex;
attribute vec3 a_normal;
attribute vec2 a_coord;
varying vec3 v_pos;
varying vec3 v_wPos;
varying vec3 v_wNormal;
varying vec2 v_coord;
uniform mat4 u_model;
uniform mat4 u_mvp;
uniform float u_time;

varying float v_glow;


#import "noise.inc"

void main() {
	v_coord = a_coord;
	vec3 vertex = a_vertex;
	v_glow = 0.5 + 0.5 * snoise((vertex*14. + vec3(0.,0.,u_time))*0.3);
	vertex *= 1.0 + 0.05 * v_glow;
	
	v_pos = vertex;
	v_wPos = (u_model * vec4(vertex,1.0)).xyz;
	v_wNormal = (u_model * vec4(a_normal,0.0)).xyz;
	gl_Position = u_mvp * vec4(vertex,1.0);
	gl_PointSize = 2.0;
}


\sun.fs

precision highp float;
varying vec3 v_pos;
varying vec3 v_wPos;
varying vec3 v_wNormal;
varying vec2 v_coord;

varying float v_glow;

uniform vec4 u_color;
uniform vec4 u_bgcolor;
uniform sampler2D u_texture;
uniform float u_time;
uniform vec3 u_camera_position;

#import "noise.inc"

void main() {
  vec3 L = normalize(vec3(1.,1.,-1.));
  vec3 N = normalize( v_wNormal );
  vec3 E = normalize( v_wPos - u_camera_position );
  vec4 color = u_color;
  
  float noise = snoise((v_pos * 50.0 + vec3(0.,0.,u_time))*0.3);

  color *= texture2D( u_texture, v_coord + vec2(noise*0.01,0.0) );
  float fresnel = pow( 1.0 - dot(N,-E), 3.0) * 0.5 + v_glow *0.5;
  color.xyz = mix( color.xyz, 1.4 * vec3(1.2,1.3,0.9), fresnel );
  gl_FragColor = color;
}


\fx.fs

precision highp float;
uniform sampler2D u_texture;
uniform sampler2D u_lowtexture;
varying vec2 v_coord;
void main() {
	vec3 color = texture2D(u_texture, v_coord).xyz;
	color += texture2D(u_lowtexture, v_coord).xyz;
	gl_FragColor = vec4(color,1.0);
}

\noise.inc

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }

